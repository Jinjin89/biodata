item_now = na.omit(item_now)
df[each_item,colname] = paste0(item_now,collapse = "&")
}
}
}
return(rbind(df_unique,df))
}
}
}
}
}
fun_list2df(sig_test2,"keep")
fun_list2df <- function(input_list,multiple_items_solver="keep",colname = "pathway"){
if(fun_check_list_of_vector(input_list)){
if(length(input_list) == 1){
return(fun_list2df_each(input_list,colname = colname))
}else{
common_items = purrr::reduce(input_list,dplyr::intersect)
# 1) if found common genes
if(length(common_items) == 0 ){
message("no common genes found")
purrr::map_df(seq_along(input_list),function(i){
fun_list2df_each(input_list[i],colname = colname)
}) -> df
return(df)
}else{
purrr::map_df(seq_along(input_list),function(i){
list_new = input_list[i]
list_new[[1]] = setdiff(list_new[[1]],common_items)
fun_list2df_each(list_new,colname = colname)
}) -> df_unique
# solve the common items
if(multiple_items_solver == "drop"){
message(paste0("Drop items appeared in multile categories: ",length(common_items)))
return(df_unique)
}else{
message(paste0("keep items appeared in multile categories: ",length(common_items)))
# 1) final df
df = data.frame(row.names = common_items)
df[[colname]] = NA
# 2) merge data
for(each_item in common_items){
for(each_cate in names(input_list)){
if(each_item %in% input_list[[each_cate]]){
item_now = c(df[each_item,colname],each_cate)
item_now = na.omit(item_now)
df[each_item,colname] = paste0(item_now,collapse = "&")
}
}
}
return(rbind(df_unique,df))
}
}
}
}
}
fun_list2df(sig_test2,"drop")
fun_list2df(sig_vec_list,"drop")
sig_test2[[3]] = c(1,2,4)
fun_list2df(sig_test2,"drop")
fun_list2df <- function(input_list,multiple_items_solver="keep",colname = "pathway"){
if(fun_check_list_of_vector(input_list)){
if(length(input_list) == 1){
return(fun_list2df_each(input_list,colname = colname))
}else{
common_items = table(unname(unlist(input_list)))
common_items = names(common_items)[common_items > 1]
print(common_items)
# 1) if found common genes
if(length(common_items) == 0 ){
message("no common genes found")
purrr::map_df(seq_along(input_list),function(i){
fun_list2df_each(input_list[i],colname = colname)
}) -> df
return(df)
}else{
purrr::map_df(seq_along(input_list),function(i){
list_new = input_list[i]
list_new[[1]] = setdiff(list_new[[1]],common_items)
fun_list2df_each(list_new,colname = colname)
}) -> df_unique
# solve the common items
if(multiple_items_solver == "drop"){
message(paste0("Drop items appeared in multile categories: ",length(common_items)))
return(df_unique)
}else{
message(paste0("keep items appeared in multile categories: ",length(common_items)))
# 1) final df
df = data.frame(row.names = common_items)
df[[colname]] = NA
# 2) merge data
for(each_item in common_items){
for(each_cate in names(input_list)){
if(each_item %in% input_list[[each_cate]]){
item_now = c(df[each_item,colname],each_cate)
item_now = na.omit(item_now)
df[each_item,colname] = paste0(item_now,collapse = "&")
}
}
}
return(rbind(df_unique,df))
}
}
}
}
}
sig_test2[[3]] = c(1,2,4)
fun_list2df(sig_test2,"drop")
fun_list2df(sig_test2,"keep")
fun_list2df_each <- function(input_list,colname){
df = data.frame(row.names = unique(input_list[[1]]))
print(length(names(input_list)))
df[[colname]] = if(length(names(input_list)) == 0) "Unknown" else names(input_list)
df
}
drop <- function(...) return(NULL)
keep <- function(common_items,input_list,colname) {
# 1) final df
df = data.frame(row.names = common_items)
df[[colname]] = ""
# 2) merge data
for(each_item in common_items){
for(each_cate in names(input_list)){
if(each_item %i% input_list[[each_cate]]){
df[each_item,colname] = paste0(df[each_item,colname],each_cate,collapse = "&")
}
}
}
}
fun_list2df <- function(input_list,multiple_items_solver="keep",colname = "pathway"){
if(fun_check_list_of_vector(input_list)){
if(length(input_list) == 1){
return(fun_list2df_each(input_list,colname = colname))
}else{
common_items = table(unname(unlist(input_list)))
common_items = names(common_items)[common_items > 1]
print(common_items)
# 1) if found common genes
if(length(common_items) == 0 ){
message("no common genes found")
purrr::map_df(seq_along(input_list),function(i){
fun_list2df_each(input_list[i],colname = colname)
}) -> df
return(df)
}else{
purrr::map_df(seq_along(input_list),function(i){
list_new = input_list[i]
list_new[[1]] = setdiff(list_new[[1]],common_items)
fun_list2df_each(list_new,colname = colname)
}) -> df_unique
# solve the common items
if(multiple_items_solver == "drop"){
message(paste0("Drop items appeared in multile categories: ",length(common_items)))
return(df_unique)
}else{
message(paste0("keep items appeared in multile categories: ",length(common_items)))
# 1) final df
df = data.frame(row.names = common_items)
df[[colname]] = NA
# 2) merge data
for(each_item in common_items){
for(each_cate in names(input_list)){
if(each_item %in% input_list[[each_cate]]){
item_now = c(df[each_item,colname],each_cate)
item_now = na.omit(item_now)
df[each_item,colname] = paste0(item_now,collapse = "&")
}
}
}
return(rbind(df_unique,df))
}
}
}
}
}
sig_test2[[3]] = c(1,2,4)
fun_list2df(sig_test2,"keep")
fun_list2df_each <- function(input_list,colname){
df = data.frame(row.names = unique(input_list[[1]]))
print(names(input_list))
print(length(names(input_list)))
df[[colname]] = if(length(names(input_list)) == 0) "Unknown" else names(input_list)
df
}
fun_list2df <- function(input_list,multiple_items_solver="keep",colname = "pathway"){
if(fun_check_list_of_vector(input_list)){
if(length(input_list) == 1){
return(fun_list2df_each(input_list,colname = colname))
}else{
common_items = table(unname(unlist(input_list)))
common_items = names(common_items)[common_items > 1]
print(common_items)
# 1) if found common genes
if(length(common_items) == 0 ){
message("no common genes found")
purrr::map_df(seq_along(input_list),function(i){
fun_list2df_each(input_list[i],colname = colname)
}) -> df
return(df)
}else{
purrr::map_df(seq_along(input_list),function(i){
list_new = input_list[i]
list_new[[1]] = setdiff(list_new[[1]],common_items)
fun_list2df_each(list_new,colname = colname)
}) -> df_unique
# solve the common items
if(multiple_items_solver == "drop"){
message(paste0("Drop items appeared in multile categories: ",length(common_items)))
return(df_unique)
}else{
message(paste0("keep items appeared in multile categories: ",length(common_items)))
# 1) final df
df = data.frame(row.names = common_items)
df[[colname]] = NA
# 2) merge data
for(each_item in common_items){
for(each_cate in names(input_list)){
if(each_item %in% input_list[[each_cate]]){
item_now = c(df[each_item,colname],each_cate)
item_now = na.omit(item_now)
df[each_item,colname] = paste0(item_now,collapse = "&")
}
}
}
return(rbind(df_unique,df))
}
}
}
}
}
sig_test2[[3]] = c(1,2,4)
fun_list2df(sig_test2,"keep")
fun_list2df_each <- function(input_list,colname){
df = data.frame(row.names = unique(input_list[[1]]))
df[[colname]] = if(names(input_list) == "") "Unknown" else names(input_list)
df
}
fun_list2df <- function(input_list,multiple_items_solver="keep",colname = "pathway"){
if(fun_check_list_of_vector(input_list)){
if(length(input_list) == 1){
return(fun_list2df_each(input_list,colname = colname))
}else{
common_items = table(unname(unlist(input_list)))
common_items = names(common_items)[common_items > 1]
print(common_items)
# 1) if found common genes
if(length(common_items) == 0 ){
message("no common genes found")
purrr::map_df(seq_along(input_list),function(i){
fun_list2df_each(input_list[i],colname = colname)
}) -> df
return(df)
}else{
purrr::map_df(seq_along(input_list),function(i){
list_new = input_list[i]
list_new[[1]] = setdiff(list_new[[1]],common_items)
fun_list2df_each(list_new,colname = colname)
}) -> df_unique
# solve the common items
if(multiple_items_solver == "drop"){
message(paste0("Drop items appeared in multile categories: ",length(common_items)))
return(df_unique)
}else{
message(paste0("keep items appeared in multile categories: ",length(common_items)))
# 1) final df
df = data.frame(row.names = common_items)
df[[colname]] = NA
# 2) merge data
for(each_item in common_items){
for(each_cate in names(input_list)){
if(each_item %in% input_list[[each_cate]]){
item_now = c(df[each_item,colname],each_cate)
item_now = na.omit(item_now)
df[each_item,colname] = paste0(item_now,collapse = "&")
}
}
}
return(rbind(df_unique,df))
}
}
}
}
}
sig_test2[[3]] = c(1,2,4)
fun_list2df(sig_test2,"keep")
fun_list2df(sig_vec_list,"keep")
fun_list2df(sig_test2[c(1,2)],"keep")
load_all()
document()
?fun_list2df
use_gpl_license()
use_gpl3_license()
use_r("sig_build")
document()
rm(list = c("fun_list2df")
)
rm(list = ls())
document()
document()
usethis::use_version()
use_package("stringr")
use_package("magrittr")
use_package("magrittr",type = 'Depends')
use_package("biodf",type = 'Depends')
load_all()
db_go
load_all()
data(db_go)
data("db_hallmark")
load_all()
load_all()
fun_db2list("NFK",db_hallmark)
loadd_all()
load_all()
load_all()
fun_db2list("NFK",db_hallmark)
load_all()
fun_db2list("NFK",db_hallmark)
load_all()
fun_db2list("NFK",db_hallmark)
fun_db2list <- function(input_name_regex,input_db,name_col="term",value_col = "genes"){
db_filtered =
input_db %>%
dplyr::filter(stringr::str_detect(.[[name_col]],input_name_regex))
print(unique(db_filtered[[name_col]]))
split(db_filtered[[value_col]],db_filtered[[name_col]])
}
if(F){
load_all()
fun_db2list("NFK",db_hallmark)
}
load_all()
fun_db2list("NFK",db_hallmark)
rm(list = ls())
load_all()
fun_db2list("NFK",db_hallmark)
rm(list = ls())
load_all()
fun_db2list("NFK",db_hallmark)
rm(list = ls())
load_all()
fun_db2list("NFK",db_hallmark)
View(hallmark_db)
rm(list = ls())
load_all()
tmp = fun_db2list("NFK",db_hallmark)
rm(list = ls())
load_all()
tmp = fun_db2list("NFK",db_hallmark)
tmp
tmp = fun_db2list("NF",db_hallmark)
tmp$HALLMARK_TNFA_SIGNALING_VIA_NFKB
meta_sig_vec_list = list()
# 1) T cell inflammaed
sig_vec_list$T_cell_inflamed = c(
"IRF1", "CD8A", "CCL2", "CCL3", "CCL4", "CXCL9", "CXCL10", "ICOS",
"GZMK", "HLA-DMA", "HLA-DMB", "HLA-DOA", "HLA-DOB")
meta_sig_vec_list$T_cell_inflamed = "Melanoma-intrinsic β-catenin signalling prevents anti-tumour immunity"
# 2) IFNγ-related gene signature
sig_vec_list$IFN_Gamma_related_gene = c(
"CD8A", "CCL5", "CD27", "CD274", "PDCD1LG2", "CD276", "CMKLR1",
"CXCL9", "CXCR6", "HLA-DQA1", "HLA-DRB1", "HLA-E", "IDO1", "LAG3", "NKG7", "PSMB10", "STAT1", "TIGIT" )
meta_sig_vec_list$IFN_Gamma_related_gene = "IFNgamma-related mRNA profile predicts clinical response to PD-1 blockade"
# 3) T effector signature
sig_vec_list$T_effector = c("GZMA", "GZMB", "PRF1", "EOMES", "IFNG", "TNF", "CXCL9", "CXCL10", "CD8A", "CD4", "FOXP3", "ICOS", "CTLA4")
meta_sig_vec_list$T_effector = "Predictive correlates of response to the anti-PD-L1 antibody MPDL3280A in cancer patients"
# 4) Immune_cytolytic_activity
sig_vec_list$Immune_cytolytic_activity = c("GZMA", "PRF")
meta_sig_vec_list$Immune_cytolytic_activity = "Molecular and genetic properties of tumors associated with local immune cytolytic activity"
sig_vec_list$T_cell_inflamed
sig_vec_list
sig_vec_list
meta_sig_vec_list
use_data(sig_vec_list)
use_data(sig_vec_list,overwrite = T)
use_data(meta_sig_vec_list)
l
meta = list()
meta$meta_sig_vec_list = list()
meta$meta_sig_vec_list = list()
meta
# 1) T cell inflammaed
sig_vec_list$T_cell_inflamed = c(
"IRF1", "CD8A", "CCL2", "CCL3", "CCL4", "CXCL9", "CXCL10", "ICOS",
"GZMK", "HLA-DMA", "HLA-DMB", "HLA-DOA", "HLA-DOB")
meta$meta_sig_vec_list$T_cell_inflamed = "Melanoma-intrinsic β-catenin signalling prevents anti-tumour immunity"
# 2) IFNγ-related gene signature
sig_vec_list$IFN_Gamma_related_gene = c(
"CD8A", "CCL5", "CD27", "CD274", "PDCD1LG2", "CD276", "CMKLR1",
"CXCL9", "CXCR6", "HLA-DQA1", "HLA-DRB1", "HLA-E", "IDO1", "LAG3", "NKG7", "PSMB10", "STAT1", "TIGIT" )
meta$meta_sig_vec_list$IFN_Gamma_related_gene = "IFNgamma-related mRNA profile predicts clinical response to PD-1 blockade"
# 3) T effector signature
sig_vec_list$T_effector = c("GZMA", "GZMB", "PRF1", "EOMES", "IFNG", "TNF", "CXCL9", "CXCL10", "CD8A", "CD4", "FOXP3", "ICOS", "CTLA4")
meta$meta_sig_vec_list$T_effector = "Predictive correlates of response to the anti-PD-L1 antibody MPDL3280A in cancer patients"
# 4) Immune_cytolytic_activity
sig_vec_list$Immune_cytolytic_activity = c("GZMA", "PRF")
meta$meta_sig_vec_list$Immune_cytolytic_activity = "Molecular and genetic properties of tumors associated with local immune cytolytic activity"
meta = list()
meta$sig_vec_list = list()
# 1) T cell inflammaed
sig_vec_list$T_cell_inflamed = c(
"IRF1", "CD8A", "CCL2", "CCL3", "CCL4", "CXCL9", "CXCL10", "ICOS",
"GZMK", "HLA-DMA", "HLA-DMB", "HLA-DOA", "HLA-DOB")
meta$sig_vec_list$T_cell_inflamed = "Melanoma-intrinsic β-catenin signalling prevents anti-tumour immunity"
# 2) IFNγ-related gene signature
sig_vec_list$IFN_Gamma_related_gene = c(
"CD8A", "CCL5", "CD27", "CD274", "PDCD1LG2", "CD276", "CMKLR1",
"CXCL9", "CXCR6", "HLA-DQA1", "HLA-DRB1", "HLA-E", "IDO1", "LAG3", "NKG7", "PSMB10", "STAT1", "TIGIT" )
meta$sig_vec_list$IFN_Gamma_related_gene = "IFNgamma-related mRNA profile predicts clinical response to PD-1 blockade"
# 3) T effector signature
sig_vec_list$T_effector = c("GZMA", "GZMB", "PRF1", "EOMES", "IFNG", "TNF", "CXCL9", "CXCL10", "CD8A", "CD4", "FOXP3", "ICOS", "CTLA4")
meta$sig_vec_list$T_effector = "Predictive correlates of response to the anti-PD-L1 antibody MPDL3280A in cancer patients"
# 4) Immune_cytolytic_activity
sig_vec_list$Immune_cytolytic_activity = c("GZMA", "PRF")
meta$sig_vec_list$Immune_cytolytic_activity = "Molecular and genetic properties of tumors associated with local immune cytolytic activity"
meta$sig_vec_list
use_data_table(meta)
use_data(meta)
docu
devtools::document()
docu
document()
require(devtools)
document()
document()
document()
build()
document()
build()
build()
devtools::build()
gc()
require(devtools)
load_all()
# 5)Martinez_Gordon_M1
sig_vec_list$Martinez_Gordon_M1 = c("CD64", "IDO", "SOCS1", "CXCL10")
# 5)Martinez_Gordon_M1
sig_vec_list$Martinez_Gordon_M1 = c("CD64", "IDO", "SOCS1", "CXCL10")
sig_vec_list$Martinez_Gordon_M2 = c("MRC1", "TGM2", "CD23", "CCL22")
meta$sig_vec_list$Martinez_Gordon_M1 = "The M1 and M2 paradigm of macrophage activation: time for reassessment"
meta$sig_vec_list$Martinez_Gordon_M1 = "The M1 and M2 paradigm of macrophage activation: time for reassessment"
meta$sig_vec_list$Martinez_Gordon_M2 = "The M1 and M2 paradigm of macrophage activation: time for reassessment"
sig_vec_list
use_data(sig_vec_list)
use_data(sig_vec_list,overwrite = T)
build()
# 1) T cell inflammaed
sig_vec_list$T_cell_inflamed = c(
"IRF1", "CD8A", "CCL2", "CCL3", "CCL4", "CXCL9", "CXCL10", "ICOS",
"GZMK", "HLA-DMA", "HLA-DMB", "HLA-DOA", "HLA-DOB")
meta$sig_vec_list$T_cell_inflamed = "Melanoma-intrinsic β-catenin signalling prevents anti-tumour immunity"
# 2) IFNγ-related gene signature
sig_vec_list$IFN_Gamma_related_gene = c(
"CD8A", "CCL5", "CD27", "CD274", "PDCD1LG2", "CD276", "CMKLR1",
"CXCL9", "CXCR6", "HLA-DQA1", "HLA-DRB1", "HLA-E", "IDO1", "LAG3", "NKG7", "PSMB10", "STAT1", "TIGIT" )
meta$sig_vec_list$IFN_Gamma_related_gene = "IFNgamma-related mRNA profile predicts clinical response to PD-1 blockade"
# 3) T effector signature
sig_vec_list$T_effector = c("GZMA", "GZMB", "PRF1", "EOMES", "IFNG", "TNF", "CXCL9", "CXCL10", "CD8A", "CD4", "FOXP3", "ICOS", "CTLA4")
meta$sig_vec_list$T_effector = "Predictive correlates of response to the anti-PD-L1 antibody MPDL3280A in cancer patients"
# 4) Immune_cytolytic_activity
sig_vec_list$Immune_cytolytic_activity = c("GZMA", "PRF")
meta$sig_vec_list$Immune_cytolytic_activity = "Molecular and genetic properties of tumors associated with local immune cytolytic activity"
# 5)Martinez_Gordon_M1/2
sig_vec_list$Martinez_Gordon_M1 = c("CD64", "IDO1", "SOCS1", "CXCL10")
sig_vec_list$Martinez_Gordon_M2 = c("MRC1", "TGM2", "CD23", "CCL22")
meta$sig_vec_list$Martinez_Gordon_M1 = "The M1 and M2 paradigm of macrophage activation: time for reassessment"
meta$sig_vec_list$Martinez_Gordon_M2 = "The M1 and M2 paradigm of macrophage activation: time for reassessment"
# 6)
sig_vec_list$Murray_M1 = c("IL23A", "IDO1","PTGS2","COX2","IL12B","NOS2","SOCS3")
sig_vec_list$Murray_M2 = c("KLF4", "CCL24", "CCL12", "CXCL13","CHIA","IRF4","SOCS2","RETNLB","CHI3L1","CHI3L2","CHI3L3")
meta$sig_vec_list$Murray_M1 = "The M1 and M2 paradigm of macrophage activation: time for reassessment"
meta$sig_vec_list$Murray_M2 = "The M1 and M2 paradigm of macrophage activation: time for reassessment"
use_data(meta,overwrite = T)
use_data(sig_vec_list,overwrite = T)
document()
build()
gc()
rm(list = ls())
data.table::fread("~/data/tcga_tide_tidepy.csv")
tcga_tide = data.table::fread("~/data/tcga_tide_tidepy.csv")
tcga_tide
require(devtools)
load_all()
tcga_tide = data.table::fread("~/data/tcga_tide_tidepy.csv") %>%
as.data.frame() %>%
set_rownames(.$sample)
tcga_tide
use_data(tcga_tide)
tcga_tide_tidepy = data.table::fread("~/data/tcga_tide_tidepy.csv") %>%
as.data.frame() %>%
set_rownames(.$sample)
use_data(tcga_tide_tidepy)
tcga_tide = readRDS("~/data/tmp_tide.rds")
tcga_tide
use_data(tcga_tide,overwrite = T)
tcga_immune
db_kegg_metabolism = readRDS("~/data/project/db/genes/kegg_metabolism.rds")
db_reactome_metabolism = readRDS("~/data/project/db/genes/reactome_metabolism.rds")
db_kegg_metabolism
db_kegg_metabolism
db_kegg
db_kegg
load_all()
db_kegg
db_reactome_metabolism
use_data(db_reactome_metabolism)
use_data(db_kegg_metabolism)
load_all()
build()
build()
document()
build()
